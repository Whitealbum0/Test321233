#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OAuth2 —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import httpx
import sys
from motor.motor_asyncio import AsyncIOMotorClient
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('backend/.env')

async def test_oauth2_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OAuth2 —Å–∏—Å—Ç–µ–º—É"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OAuth2 —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    print("\n1. üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MongoDB...")
    try:
        mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
        client = AsyncIOMotorClient(mongo_url)
        await client.admin.command('ping')
        print("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        db = client[os.environ.get('DB_NAME', 'ecommerce_local')]
        products_count = await db.products.count_documents({})
        users_count = await db.users.count_documents({})
        print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {products_count}")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {users_count}")
        
        client.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ MongoDB: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
    print("\n2. üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint
            response = await client.get("http://localhost:8001/")
            if response.status_code == 200:
                print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                data = response.json()
                print(f"   üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message', 'N/A')}")
            else:
                print(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                return False
            
            # –¢–µ—Å—Ç health check
            response = await client.get("http://localhost:8001/health")
            if response.status_code == 200:
                print("‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è Health check –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            
            # –¢–µ—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤
            response = await client.get("http://localhost:8001/api/products")
            if response.status_code == 200:
                products = response.json()
                print(f"‚úÖ API —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(products)} —Ç–æ–≤–∞—Ä–æ–≤)")
            else:
                print(f"‚ùå API —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                return False
            
            # –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            response = await client.get("http://localhost:8001/api/categories")
            if response.status_code == 200:
                categories = response.json()
                print(f"‚úÖ API –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(categories.get('categories', []))} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
            else:
                print(f"‚ùå API –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                return False
            
            # –¢–µ—Å—Ç OAuth2 redirect (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 307)
            response = await client.get("http://localhost:8001/api/auth/google", follow_redirects=False)
            if response.status_code in [307, 302]:
                print("‚úÖ OAuth2 redirect —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   üîó –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: {response.headers.get('location', 'N/A')}")
            else:
                print(f"‚ö†Ô∏è OAuth2 redirect: {response.status_code}")
            
    except httpx.ConnectError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python server_oauth.py")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\n3. üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    google_client_id = os.environ.get('GOOGLE_CLIENT_ID')
    google_client_secret = os.environ.get('GOOGLE_CLIENT_SECRET')
    jwt_secret = os.environ.get('JWT_SECRET_KEY')
    
    if not google_client_id or google_client_id == 'your-google-client-id':
        print("‚ö†Ô∏è GOOGLE_CLIENT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google OAuth2 –≤ backend/.env")
    else:
        print("‚úÖ GOOGLE_CLIENT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if not google_client_secret or google_client_secret == 'your-google-client-secret':
        print("‚ö†Ô∏è GOOGLE_CLIENT_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google OAuth2 –≤ backend/.env")
    else:
        print("‚úÖ GOOGLE_CLIENT_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if not jwt_secret or jwt_secret == 'your-super-secret-key-change-this-in-production':
        print("‚ö†Ô∏è JWT_SECRET_KEY –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á")
    else:
        print("‚úÖ JWT_SECRET_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    print("\n4. üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'backend/oauth_auth.py',
        'backend/server_oauth.py',
        'backend/requirements_oauth2.txt',
        'frontend/src/contexts/OAuth2AuthContext.js',
        'frontend/src/components/Auth/GoogleLoginButton.js',
        'frontend/src/components/Desktop/DesktopNavbarOAuth2.js',
        'frontend/src/components/Mobile/MobileNavbarOAuth2.js',
        'frontend/src/App_OAuth2.js'
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {len(missing_files)}")
        return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google OAuth2 –≤ backend/.env (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ)")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: python server_oauth.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: npm start (—Å App_OAuth2.js)")
    print("4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000")
    print("5. –ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google'")
    
    return True

if __name__ == "__main__":
    try:
        success = asyncio.run(test_oauth2_system())
        if success:
            print("\n‚úÖ OAuth2 —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("\n‚ùå OAuth2 —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")